package hibernate.remotes;

import hibernate.entities.Finansijskidokument;

import java.util.List;

import javax.ejb.Remote;

/**
 * Remote interface for FinansijskidokumentFacade.
 * 
 * @author MyEclipse Persistence Tools
 */
@Remote
public interface FinansijskidokumentFacadeRemote {
	/**
	 * Perform an initial save of a previously unsaved Finansijskidokument
	 * entity. All subsequent persist actions of this entity should use the
	 * #update() method.
	 * 
	 * @param entity
	 *            Finansijskidokument entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Finansijskidokument entity);

	/**
	 * Delete a persistent Finansijskidokument entity.
	 * 
	 * @param entity
	 *            Finansijskidokument entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Finansijskidokument entity);

	/**
	 * Persist a previously saved Finansijskidokument entity and return it or a
	 * copy of it to the sender. A copy of the Finansijskidokument entity
	 * parameter is returned when the JPA persistence mechanism has not
	 * previously been tracking the updated entity.
	 * 
	 * @param entity
	 *            Finansijskidokument entity to update
	 * @return Finansijskidokument the persisted Finansijskidokument entity
	 *         instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Finansijskidokument update(Finansijskidokument entity);

	public Finansijskidokument findById(Integer id);

	/**
	 * Find all Finansijskidokument entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Finansijskidokument property to query
	 * @param value
	 *            the property value to match
	 * @return List<Finansijskidokument> found by query
	 */
	public List<Finansijskidokument> findByProperty(String propertyName,
			Object value);

	public List<Finansijskidokument> findByUkupanIznosFd(Object ukupanIznosFd);

	public List<Finansijskidokument> findByPreostaliDugFd(Object preostaliDugFd);

	public List<Finansijskidokument> findByVerzija(Object verzija);

	/**
	 * Find all Finansijskidokument entities.
	 * 
	 * @return List<Finansijskidokument> all Finansijskidokument entities
	 */
	public List<Finansijskidokument> findAll();
}