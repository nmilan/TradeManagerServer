package hibernate.remotes;

import hibernate.entities.Desnakonta;

import java.util.List;

import javax.ejb.Remote;

/**
 * Remote interface for DesnakontaFacade.
 * 
 * @author MyEclipse Persistence Tools
 */
@Remote
public interface DesnakontaFacadeRemote {
	/**
	 * Perform an initial save of a previously unsaved Desnakonta entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Desnakonta entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Desnakonta entity);

	/**
	 * Delete a persistent Desnakonta entity.
	 * 
	 * @param entity
	 *            Desnakonta entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Desnakonta entity);

	/**
	 * Persist a previously saved Desnakonta entity and return it or a copy of
	 * it to the sender. A copy of the Desnakonta entity parameter is returned
	 * when the JPA persistence mechanism has not previously been tracking the
	 * updated entity.
	 * 
	 * @param entity
	 *            Desnakonta entity to update
	 * @return Desnakonta the persisted Desnakonta entity instance, may not be
	 *         the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Desnakonta update(Desnakonta entity);

	public Desnakonta findById(Integer id);

	/**
	 * Find all Desnakonta entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Desnakonta property to query
	 * @param value
	 *            the property value to match
	 * @return List<Desnakonta> found by query
	 */
	public List<Desnakonta> findByProperty(String propertyName, Object value);

	/**
	 * Find all Desnakonta entities.
	 * 
	 * @return List<Desnakonta> all Desnakonta entities
	 */
	public List<Desnakonta> findAll();
}