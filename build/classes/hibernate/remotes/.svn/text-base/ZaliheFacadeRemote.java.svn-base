package hibernate.remotes;

import hibernate.entities.Zalihe;
import hibernate.entities.ZaliheId;

import java.util.List;

import javax.ejb.Remote;

/**
 * Remote interface for ZaliheFacade.
 * 
 * @author MyEclipse Persistence Tools
 */
@Remote
public interface ZaliheFacadeRemote {
	/**
	 * Perform an initial save of a previously unsaved Zalihe entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Zalihe entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Zalihe entity);

	/**
	 * Delete a persistent Zalihe entity.
	 * 
	 * @param entity
	 *            Zalihe entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Zalihe entity);

	/**
	 * Persist a previously saved Zalihe entity and return it or a copy of it to
	 * the sender. A copy of the Zalihe entity parameter is returned when the
	 * JPA persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Zalihe entity to update
	 * @return Zalihe the persisted Zalihe entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Zalihe update(Zalihe entity);

	public Zalihe findById(ZaliheId id);

	/**
	 * Find all Zalihe entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Zalihe property to query
	 * @param value
	 *            the property value to match
	 * @return List<Zalihe> found by query
	 */
	public List<Zalihe> findByProperty(String propertyName, Object value);

	public List<Zalihe> findByKolicinaProizvoda(Object kolicinaProizvoda);

	/**
	 * Find all Zalihe entities.
	 * 
	 * @return List<Zalihe> all Zalihe entities
	 */
	public List<Zalihe> findAll();
}