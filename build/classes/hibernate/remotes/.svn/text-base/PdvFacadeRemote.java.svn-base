package hibernate.remotes;

import hibernate.entities.Pdv;

import java.util.List;

import javax.ejb.Remote;

/**
 * Remote interface for PdvFacade.
 * 
 * @author MyEclipse Persistence Tools
 */
@Remote
public interface PdvFacadeRemote {
	/**
	 * Perform an initial save of a previously unsaved Pdv entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Pdv entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Pdv entity);

	/**
	 * Delete a persistent Pdv entity.
	 * 
	 * @param entity
	 *            Pdv entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Pdv entity);

	/**
	 * Persist a previously saved Pdv entity and return it or a copy of it to
	 * the sender. A copy of the Pdv entity parameter is returned when the JPA
	 * persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Pdv entity to update
	 * @return Pdv the persisted Pdv entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Pdv update(Pdv entity);

	public Pdv findById(Integer id);

	/**
	 * Find all Pdv entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Pdv property to query
	 * @param value
	 *            the property value to match
	 * @return List<Pdv> found by query
	 */
	public List<Pdv> findByProperty(String propertyName, Object value);

	public List<Pdv> findByStopaPdva(Object stopaPdva);

	/**
	 * Find all Pdv entities.
	 * 
	 * @return List<Pdv> all Pdv entities
	 */
	public List<Pdv> findAll();
}