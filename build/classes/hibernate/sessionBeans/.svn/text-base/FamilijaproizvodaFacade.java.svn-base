package hibernate.sessionBeans;

import hibernate.entities.Familijaproizvoda;
import hibernate.remotes.FamilijaproizvodaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Familijaproizvoda.
 * 
 * @see fasades.Familijaproizvoda
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class FamilijaproizvodaFacade implements FamilijaproizvodaFacadeRemote{
	// property constants
	public static final String NAZIV_FAMILIJE = "nazivFamilije";
	public static final String OPIS_FAMILIJE = "opisFamilije";
	public static final String VERZIJA = "verzija";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Familijaproizvoda entity.
	 * All subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Familijaproizvoda entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Familijaproizvoda entity) {
		LogUtil.log("saving Familijaproizvoda instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Familijaproizvoda entity.
	 * 
	 * @param entity
	 *            Familijaproizvoda entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Familijaproizvoda entity) {
		LogUtil.log("deleting Familijaproizvoda instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Familijaproizvoda.class, entity
					.getIdFamilijie());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Familijaproizvoda entity and return it or a
	 * copy of it to the sender. A copy of the Familijaproizvoda entity
	 * parameter is returned when the JPA persistence mechanism has not
	 * previously been tracking the updated entity.
	 * 
	 * @param entity
	 *            Familijaproizvoda entity to update
	 * @return Familijaproizvoda the persisted Familijaproizvoda entity
	 *         instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Familijaproizvoda update(Familijaproizvoda entity) {
		LogUtil.log("updating Familijaproizvoda instance", Level.INFO, null);
		try {
			Familijaproizvoda result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Familijaproizvoda findById(Integer id) {
		LogUtil.log("finding Familijaproizvoda instance with id: " + id,
				Level.INFO, null);
		try {
			Familijaproizvoda instance = entityManager.find(
					Familijaproizvoda.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Familijaproizvoda entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Familijaproizvoda property to query
	 * @param value
	 *            the property value to match
	 * @return List<Familijaproizvoda> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Familijaproizvoda> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding Familijaproizvoda instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Familijaproizvoda model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Familijaproizvoda> findByNazivFamilije(Object nazivFamilije) {
		return findByProperty(NAZIV_FAMILIJE, nazivFamilije);
	}

	public List<Familijaproizvoda> findByOpisFamilije(Object opisFamilije) {
		return findByProperty(OPIS_FAMILIJE, opisFamilije);
	}

	public List<Familijaproizvoda> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Familijaproizvoda entities.
	 * 
	 * @return List<Familijaproizvoda> all Familijaproizvoda entities
	 */
	@SuppressWarnings("unchecked")
	public List<Familijaproizvoda> findAll() {
		LogUtil
				.log("finding all Familijaproizvoda instances", Level.INFO,
						null);
		try {
			final String queryString = "select model from Familijaproizvoda model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}