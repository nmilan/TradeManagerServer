package hibernate.sessionBeans;

import hibernate.entities.Finansijskidokument;
import hibernate.remotes.FinansijskidokumentFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Finansijskidokument.
 * 
 * @see fasades.Finansijskidokument
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class FinansijskidokumentFacade implements FinansijskidokumentFacadeRemote{
	// property constants
	public static final String UKUPAN_IZNOS_FD = "ukupanIznosFd";
	public static final String PREOSTALI_DUG_FD = "preostaliDugFd";
	public static final String VERZIJA = "verzija";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Finansijskidokument
	 * entity. All subsequent persist actions of this entity should use the
	 * #update() method.
	 * 
	 * @param entity
	 *            Finansijskidokument entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Finansijskidokument entity) {
		LogUtil.log("saving Finansijskidokument instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Finansijskidokument entity.
	 * 
	 * @param entity
	 *            Finansijskidokument entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Finansijskidokument entity) {
		LogUtil.log("deleting Finansijskidokument instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Finansijskidokument.class,
					entity.getIdFinansiskogDokumenta());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Finansijskidokument entity and return it or a
	 * copy of it to the sender. A copy of the Finansijskidokument entity
	 * parameter is returned when the JPA persistence mechanism has not
	 * previously been tracking the updated entity.
	 * 
	 * @param entity
	 *            Finansijskidokument entity to update
	 * @return Finansijskidokument the persisted Finansijskidokument entity
	 *         instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Finansijskidokument update(Finansijskidokument entity) {
		LogUtil.log("updating Finansijskidokument instance", Level.INFO, null);
		try {
			Finansijskidokument result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Finansijskidokument findById(Integer id) {
		LogUtil.log("finding Finansijskidokument instance with id: " + id,
				Level.INFO, null);
		try {
			Finansijskidokument instance = entityManager.find(
					Finansijskidokument.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Finansijskidokument entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Finansijskidokument property to query
	 * @param value
	 *            the property value to match
	 * @return List<Finansijskidokument> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Finansijskidokument> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding Finansijskidokument instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Finansijskidokument model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Finansijskidokument> findByUkupanIznosFd(Object ukupanIznosFd) {
		return findByProperty(UKUPAN_IZNOS_FD, ukupanIznosFd);
	}

	public List<Finansijskidokument> findByPreostaliDugFd(Object preostaliDugFd) {
		return findByProperty(PREOSTALI_DUG_FD, preostaliDugFd);
	}

	public List<Finansijskidokument> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Finansijskidokument entities.
	 * 
	 * @return List<Finansijskidokument> all Finansijskidokument entities
	 */
	@SuppressWarnings("unchecked")
	public List<Finansijskidokument> findAll() {
		LogUtil.log("finding all Finansijskidokument instances", Level.INFO,
				null);
		try {
			final String queryString = "select model from Finansijskidokument model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}