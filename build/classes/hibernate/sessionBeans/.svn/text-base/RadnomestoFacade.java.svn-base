package hibernate.sessionBeans;

import hibernate.entities.Radnomesto;
import hibernate.remotes.RadnomestoFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Radnomesto.
 * 
 * @see fasades.Radnomesto
 * @author MyEclipse Persistence Tools
 */
@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class RadnomestoFacade implements RadnomestoFacadeRemote{
	// property constants
	public static final String NAZIV_RADNOG_MESTA = "nazivRadnogMesta";
	public static final String OPIS_RADNOG_MESTA = "opisRadnogMesta";
	public static final String VERZIJA = "verzija";

	@Resource 
	private SessionContext ctx;
	
	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Radnomesto entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Radnomesto entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRED)
	public void save(Radnomesto entity) {
		LogUtil.log("saving Radnomesto instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Radnomesto entity.
	 * 
	 * @param entity
	 *            Radnomesto entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Radnomesto entity) {
		LogUtil.log("deleting Radnomesto instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Radnomesto.class, entity
					.getIdRadnogMesta());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Radnomesto entity and return it or a copy of
	 * it to the sender. A copy of the Radnomesto entity parameter is returned
	 * when the JPA persistence mechanism has not previously been tracking the
	 * updated entity.
	 * 
	 * @param entity
	 *            Radnomesto entity to update
	 * @return Radnomesto the persisted Radnomesto entity instance, may not be
	 *         the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRED)
	public Radnomesto update(Radnomesto entity) {
		LogUtil.log("updating Radnomesto instance", Level.INFO, null);
		try {
			Radnomesto result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Radnomesto findById(Integer id) {
		LogUtil.log("finding Radnomesto instance with id: " + id, Level.INFO,
				null);
		try {
			Radnomesto instance = entityManager.find(Radnomesto.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Radnomesto entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Radnomesto property to query
	 * @param value
	 *            the property value to match
	 * @return List<Radnomesto> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Radnomesto> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding Radnomesto instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Radnomesto model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Radnomesto> findByNazivRadnogMesta(Object nazivRadnogMesta) {
		return findByProperty(NAZIV_RADNOG_MESTA, nazivRadnogMesta);
	}

	public List<Radnomesto> findByOpisRadnogMesta(Object opisRadnogMesta) {
		return findByProperty(OPIS_RADNOG_MESTA, opisRadnogMesta);
	}

	public List<Radnomesto> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Radnomesto entities.
	 * 
	 * @return List<Radnomesto> all Radnomesto entities
	 */
	@SuppressWarnings("unchecked")
	public List<Radnomesto> findAll() {
		LogUtil.log("finding all Radnomesto instances", Level.INFO, null);
		try {
			final String queryString = "select model from Radnomesto model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}