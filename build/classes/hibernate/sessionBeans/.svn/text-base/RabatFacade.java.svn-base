package hibernate.sessionBeans;

import hibernate.entities.Rabat;
import hibernate.remotes.RabatFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Rabat.
 * 
 * @see fasades.Rabat
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class RabatFacade implements RabatFacadeRemote{
	// property constants
	public static final String KUPOVNI_RABAT = "kupovniRabat";
	public static final String PROCENAT_RABATA = "procenatRabata";
	public static final String VERZIJA = "verzija";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Rabat entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Rabat entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Rabat entity) {
		LogUtil.log("saving Rabat instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Rabat entity.
	 * 
	 * @param entity
	 *            Rabat entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Rabat entity) {
		LogUtil.log("deleting Rabat instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Rabat.class, entity
					.getIdRabata());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Rabat entity and return it or a copy of it to
	 * the sender. A copy of the Rabat entity parameter is returned when the JPA
	 * persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Rabat entity to update
	 * @return Rabat the persisted Rabat entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Rabat update(Rabat entity) {
		LogUtil.log("updating Rabat instance", Level.INFO, null);
		try {
			Rabat result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Rabat findById(Integer id) {
		LogUtil.log("finding Rabat instance with id: " + id, Level.INFO, null);
		try {
			Rabat instance = entityManager.find(Rabat.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Rabat entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Rabat property to query
	 * @param value
	 *            the property value to match
	 * @return List<Rabat> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Rabat> findByProperty(String propertyName, final Object value) {
		LogUtil.log("finding Rabat instance with property: " + propertyName
				+ ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Rabat model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Rabat> findByKupovniRabat(Object kupovniRabat) {
		return findByProperty(KUPOVNI_RABAT, kupovniRabat);
	}

	public List<Rabat> findByProcenatRabata(Object procenatRabata) {
		return findByProperty(PROCENAT_RABATA, procenatRabata);
	}

	public List<Rabat> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Rabat entities.
	 * 
	 * @return List<Rabat> all Rabat entities
	 */
	@SuppressWarnings("unchecked")
	public List<Rabat> findAll() {
		LogUtil.log("finding all Rabat instances", Level.INFO, null);
		try {
			final String queryString = "select model from Rabat model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}