package hibernate.sessionBeans;

import hibernate.entities.Tipproizvoda;
import hibernate.entities.TipproizvodaId;
import hibernate.remotes.TipproizvodaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Tipproizvoda.
 * 
 * @see fasades.Tipproizvoda
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class TipproizvodaFacade implements TipproizvodaFacadeRemote{
	// property constants
	public static final String NAZIV_TIPA_PROIZVODA = "nazivTipaProizvoda";
	public static final String OPIS_TIPA_PROIZVODA = "opisTipaProizvoda";
	public static final String VERZIJA = "verzija";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Tipproizvoda entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Tipproizvoda entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Tipproizvoda entity) {
		LogUtil.log("saving Tipproizvoda instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Tipproizvoda entity.
	 * 
	 * @param entity
	 *            Tipproizvoda entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Tipproizvoda entity) {
		LogUtil.log("deleting Tipproizvoda instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Tipproizvoda.class, entity
					.getId());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Tipproizvoda entity and return it or a copy of
	 * it to the sender. A copy of the Tipproizvoda entity parameter is returned
	 * when the JPA persistence mechanism has not previously been tracking the
	 * updated entity.
	 * 
	 * @param entity
	 *            Tipproizvoda entity to update
	 * @return Tipproizvoda the persisted Tipproizvoda entity instance, may not
	 *         be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Tipproizvoda update(Tipproizvoda entity) {
		LogUtil.log("updating Tipproizvoda instance", Level.INFO, null);
		try {
			Tipproizvoda result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Tipproizvoda findById(TipproizvodaId id) {
		LogUtil.log("finding Tipproizvoda instance with id: " + id, Level.INFO,
				null);
		try {
			Tipproizvoda instance = entityManager.find(Tipproizvoda.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Tipproizvoda entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Tipproizvoda property to query
	 * @param value
	 *            the property value to match
	 * @return List<Tipproizvoda> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Tipproizvoda> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding Tipproizvoda instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Tipproizvoda model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Tipproizvoda> findByNazivTipaProizvoda(Object nazivTipaProizvoda) {
		return findByProperty(NAZIV_TIPA_PROIZVODA, nazivTipaProizvoda);
	}

	public List<Tipproizvoda> findByOpisTipaProizvoda(Object opisTipaProizvoda) {
		return findByProperty(OPIS_TIPA_PROIZVODA, opisTipaProizvoda);
	}

	public List<Tipproizvoda> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Tipproizvoda entities.
	 * 
	 * @return List<Tipproizvoda> all Tipproizvoda entities
	 */
	@SuppressWarnings("unchecked")
	public List<Tipproizvoda> findAll() {
		LogUtil.log("finding all Tipproizvoda instances", Level.INFO, null);
		try {
			final String queryString = "select model from Tipproizvoda model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}