package hibernate.sessionBeans;

import hibernate.entities.NaseljenaMesta;
import hibernate.remotes.NaseljenaMestaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity NaseljenaMesta.
 * 
 * @see fasades.NaseljenaMesta
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class NaseljenaMestaFacade implements NaseljenaMestaFacadeRemote{
	// property constants
	public static final String NM_NAZIV = "nmNaziv";
	public static final String NM_PTTOZNAKA = "nmPttoznaka";
	public static final String NM_INOSTRANO = "nmInostrano";
	public static final String NM_BROJ_ST = "nmBrojSt";
	public static final String VERZIJA2 = "verzija2";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved NaseljenaMesta entity.
	 * All subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            NaseljenaMesta entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(NaseljenaMesta entity) {
		LogUtil.log("saving NaseljenaMesta instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent NaseljenaMesta entity.
	 * 
	 * @param entity
	 *            NaseljenaMesta entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(NaseljenaMesta entity) {
		LogUtil.log("deleting NaseljenaMesta instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(NaseljenaMesta.class, entity
					.getNmSifra());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved NaseljenaMesta entity and return it or a copy
	 * of it to the sender. A copy of the NaseljenaMesta entity parameter is
	 * returned when the JPA persistence mechanism has not previously been
	 * tracking the updated entity.
	 * 
	 * @param entity
	 *            NaseljenaMesta entity to update
	 * @return NaseljenaMesta the persisted NaseljenaMesta entity instance, may
	 *         not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public NaseljenaMesta update(NaseljenaMesta entity) {
		LogUtil.log("updating NaseljenaMesta instance", Level.INFO, null);
		try {
			NaseljenaMesta result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public NaseljenaMesta findById(Integer id) {
		LogUtil.log("finding NaseljenaMesta instance with id: " + id,
				Level.INFO, null);
		try {
			NaseljenaMesta instance = entityManager.find(NaseljenaMesta.class,
					id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all NaseljenaMesta entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the NaseljenaMesta property to query
	 * @param value
	 *            the property value to match
	 * @return List<NaseljenaMesta> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<NaseljenaMesta> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding NaseljenaMesta instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from NaseljenaMesta model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<NaseljenaMesta> findByNmNaziv(Object nmNaziv) {
		return findByProperty(NM_NAZIV, nmNaziv);
	}

	public List<NaseljenaMesta> findByNmPttoznaka(Object nmPttoznaka) {
		return findByProperty(NM_PTTOZNAKA, nmPttoznaka);
	}

	public List<NaseljenaMesta> findByNmInostrano(Object nmInostrano) {
		return findByProperty(NM_INOSTRANO, nmInostrano);
	}

	public List<NaseljenaMesta> findByNmBrojSt(Object nmBrojSt) {
		return findByProperty(NM_BROJ_ST, nmBrojSt);
	}

	public List<NaseljenaMesta> findByVerzija2(Object verzija2) {
		return findByProperty(VERZIJA2, verzija2);
	}

	/**
	 * Find all NaseljenaMesta entities.
	 * 
	 * @return List<NaseljenaMesta> all NaseljenaMesta entities
	 */
	@SuppressWarnings("unchecked")
	public List<NaseljenaMesta> findAll() {
		LogUtil.log("finding all NaseljenaMesta instances", Level.INFO, null);
		try {
			final String queryString = "select model from NaseljenaMesta model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}