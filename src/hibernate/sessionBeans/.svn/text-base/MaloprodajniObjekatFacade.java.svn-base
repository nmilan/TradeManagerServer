package hibernate.sessionBeans;

import hibernate.entities.MaloprodajniObjekat;
import hibernate.remotes.MaloprodajniObjekatFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity MaloprodajniObjekat.
 * 
 * @see fasades.MaloprodajniObjekat
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class MaloprodajniObjekatFacade implements MaloprodajniObjekatFacadeRemote{
	// property constants
	public static final String NAZIV_MALOPRODAJE = "nazivMaloprodaje";
	public static final String RADNO_VREME_MP = "radnoVremeMp";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved MaloprodajniObjekat
	 * entity. All subsequent persist actions of this entity should use the
	 * #update() method.
	 * 
	 * @param entity
	 *            MaloprodajniObjekat entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(MaloprodajniObjekat entity) {
		LogUtil.log("saving MaloprodajniObjekat instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent MaloprodajniObjekat entity.
	 * 
	 * @param entity
	 *            MaloprodajniObjekat entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(MaloprodajniObjekat entity) {
		LogUtil.log("deleting MaloprodajniObjekat instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(MaloprodajniObjekat.class,
					entity.getIdMaloprodajnogObjekta());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved MaloprodajniObjekat entity and return it or a
	 * copy of it to the sender. A copy of the MaloprodajniObjekat entity
	 * parameter is returned when the JPA persistence mechanism has not
	 * previously been tracking the updated entity.
	 * 
	 * @param entity
	 *            MaloprodajniObjekat entity to update
	 * @return MaloprodajniObjekat the persisted MaloprodajniObjekat entity
	 *         instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public MaloprodajniObjekat update(MaloprodajniObjekat entity) {
		LogUtil.log("updating MaloprodajniObjekat instance", Level.INFO, null);
		try {
			MaloprodajniObjekat result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public MaloprodajniObjekat findById(Integer id) {
		LogUtil.log("finding MaloprodajniObjekat instance with id: " + id,
				Level.INFO, null);
		try {
			MaloprodajniObjekat instance = entityManager.find(
					MaloprodajniObjekat.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all MaloprodajniObjekat entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the MaloprodajniObjekat property to query
	 * @param value
	 *            the property value to match
	 * @return List<MaloprodajniObjekat> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<MaloprodajniObjekat> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding MaloprodajniObjekat instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from MaloprodajniObjekat model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<MaloprodajniObjekat> findByNazivMaloprodaje(
			Object nazivMaloprodaje) {
		return findByProperty(NAZIV_MALOPRODAJE, nazivMaloprodaje);
	}

	public List<MaloprodajniObjekat> findByRadnoVremeMp(Object radnoVremeMp) {
		return findByProperty(RADNO_VREME_MP, radnoVremeMp);
	}

	/**
	 * Find all MaloprodajniObjekat entities.
	 * 
	 * @return List<MaloprodajniObjekat> all MaloprodajniObjekat entities
	 */
	@SuppressWarnings("unchecked")
	public List<MaloprodajniObjekat> findAll() {
		LogUtil.log("finding all MaloprodajniObjekat instances", Level.INFO,
				null);
		try {
			final String queryString = "select model from MaloprodajniObjekat model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}