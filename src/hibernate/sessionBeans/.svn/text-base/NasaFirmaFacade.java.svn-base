package hibernate.sessionBeans;

import hibernate.entities.NasaFirma;
import hibernate.remotes.NasaFirmaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity NasaFirma.
 * 
 * @see fasades.NasaFirma
 * @author MyEclipse Persistence Tools
 */
@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class NasaFirmaFacade implements NasaFirmaFacadeRemote{
	// property constants
	public static final String NAZIV_NASE_FIRME = "nazivNaseFirme";
	public static final String OPIS_NASE_FIRME = "opisNaseFirme";
	public static final String PIB_NASE_FIRME = "pibNaseFirme";
	public static final String MATICNI_BROJ_NASE_FIRME = "maticniBrojNaseFirme";
	public static final String IME_VLASNIKA_NASE_FIRME = "imeVlasnikaNaseFirme";
	public static final String PREZIME_VLASNIKA_NASE_FIRME = "prezimeVlasnikaNaseFirme";
	public static final String LOGO_URL = "logoUrl";
	public static final String VERZIJA = "verzija";

	@Resource 
	private SessionContext ctx;
	
	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved NasaFirma entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            NasaFirma entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void save(NasaFirma entity) {
		LogUtil.log("saving NasaFirma instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent NasaFirma entity.
	 * 
	 * @param entity
	 *            NasaFirma entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void delete(NasaFirma entity) {
		LogUtil.log("deleting NasaFirma instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(NasaFirma.class, entity
					.getOznakaNaseFirme());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved NasaFirma entity and return it or a copy of it
	 * to the sender. A copy of the NasaFirma entity parameter is returned when
	 * the JPA persistence mechanism has not previously been tracking the
	 * updated entity.
	 * 
	 * @param entity
	 *            NasaFirma entity to update
	 * @return NasaFirma the persisted NasaFirma entity instance, may not be the
	 *         same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public NasaFirma update(NasaFirma entity) {
		LogUtil.log("updating NasaFirma instance", Level.INFO, null);
		try {
			NasaFirma result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public NasaFirma findById(Integer id) {
		LogUtil.log("finding NasaFirma instance with id: " + id, Level.INFO,
				null);
		try {
			NasaFirma instance = entityManager.find(NasaFirma.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all NasaFirma entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the NasaFirma property to query
	 * @param value
	 *            the property value to match
	 * @return List<NasaFirma> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<NasaFirma> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding NasaFirma instance with property: " + propertyName
				+ ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from NasaFirma model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<NasaFirma> findByNazivNaseFirme(Object nazivNaseFirme) {
		return findByProperty(NAZIV_NASE_FIRME, nazivNaseFirme);
	}

	public List<NasaFirma> findByOpisNaseFirme(Object opisNaseFirme) {
		return findByProperty(OPIS_NASE_FIRME, opisNaseFirme);
	}

	public List<NasaFirma> findByPibNaseFirme(Object pibNaseFirme) {
		return findByProperty(PIB_NASE_FIRME, pibNaseFirme);
	}

	public List<NasaFirma> findByMaticniBrojNaseFirme(
			Object maticniBrojNaseFirme) {
		return findByProperty(MATICNI_BROJ_NASE_FIRME, maticniBrojNaseFirme);
	}

	public List<NasaFirma> findByImeVlasnikaNaseFirme(
			Object imeVlasnikaNaseFirme) {
		return findByProperty(IME_VLASNIKA_NASE_FIRME, imeVlasnikaNaseFirme);
	}

	public List<NasaFirma> findByPrezimeVlasnikaNaseFirme(
			Object prezimeVlasnikaNaseFirme) {
		return findByProperty(PREZIME_VLASNIKA_NASE_FIRME,
				prezimeVlasnikaNaseFirme);
	}

	public List<NasaFirma> findByLogoUrl(Object logoUrl) {
		return findByProperty(LOGO_URL, logoUrl);
	}

	public List<NasaFirma> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all NasaFirma entities.
	 * 
	 * @return List<NasaFirma> all NasaFirma entities
	 */
	@SuppressWarnings("unchecked")
	public List<NasaFirma> findAll() {
		LogUtil.log("finding all NasaFirma instances", Level.INFO, null);
		try {
			final String queryString = "select model from NasaFirma model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}