package hibernate.sessionBeans;

import hibernate.entities.Vrstadokumenta;
import hibernate.remotes.VrstadokumentaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Vrstadokumenta.
 * 
 * @see fasades.Vrstadokumenta
 * @author MyEclipse Persistence Tools
 */
@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class VrstadokumentaFacade implements VrstadokumentaFacadeRemote{
	// property constants
	public static final String NAZIV_VRSTE_DOKUMENTA = "nazivVrsteDokumenta";
	public static final String OPIS_VRSTE_DOKUMENTA = "opisVrsteDokumenta";
	public static final String VERZIJA = "verzija";

	@Resource 
	private SessionContext ctx;
	
	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Vrstadokumenta entity.
	 * All subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Vrstadokumenta entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Vrstadokumenta entity) {
		LogUtil.log("saving Vrstadokumenta instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Vrstadokumenta entity.
	 * 
	 * @param entity
	 *            Vrstadokumenta entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void delete(Vrstadokumenta entity) {
		LogUtil.log("deleting Vrstadokumenta instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Vrstadokumenta.class, entity
					.getIdVrsteDokumenta());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Vrstadokumenta entity and return it or a copy
	 * of it to the sender. A copy of the Vrstadokumenta entity parameter is
	 * returned when the JPA persistence mechanism has not previously been
	 * tracking the updated entity.
	 * 
	 * @param entity
	 *            Vrstadokumenta entity to update
	 * @return Vrstadokumenta the persisted Vrstadokumenta entity instance, may
	 *         not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Vrstadokumenta update(Vrstadokumenta entity) {
		LogUtil.log("updating Vrstadokumenta instance", Level.INFO, null);
		try {
			Vrstadokumenta result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Vrstadokumenta findById(Integer id) {
		LogUtil.log("finding Vrstadokumenta instance with id: " + id,
				Level.INFO, null);
		try {
			Vrstadokumenta instance = entityManager.find(Vrstadokumenta.class,
					id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Vrstadokumenta entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Vrstadokumenta property to query
	 * @param value
	 *            the property value to match
	 * @return List<Vrstadokumenta> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Vrstadokumenta> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding Vrstadokumenta instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Vrstadokumenta model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Vrstadokumenta> findByNazivVrsteDokumenta(
			Object nazivVrsteDokumenta) {
		return findByProperty(NAZIV_VRSTE_DOKUMENTA, nazivVrsteDokumenta);
	}

	public List<Vrstadokumenta> findByOpisVrsteDokumenta(
			Object opisVrsteDokumenta) {
		return findByProperty(OPIS_VRSTE_DOKUMENTA, opisVrsteDokumenta);
	}

	public List<Vrstadokumenta> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Vrstadokumenta entities.
	 * 
	 * @return List<Vrstadokumenta> all Vrstadokumenta entities
	 */
	@SuppressWarnings("unchecked")
	public List<Vrstadokumenta> findAll() {
		LogUtil.log("finding all Vrstadokumenta instances", Level.INFO, null);
		try {
			final String queryString = "select model from Vrstadokumenta model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}