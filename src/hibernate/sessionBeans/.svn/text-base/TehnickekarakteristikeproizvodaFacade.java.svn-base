package hibernate.sessionBeans;

import hibernate.entities.Tehnickekarakteristikeproizvoda;
import hibernate.remotes.TehnickekarakteristikeproizvodaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Tehnickekarakteristikeproizvoda.
 * 
 * @see fasades.Tehnickekarakteristikeproizvoda
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class TehnickekarakteristikeproizvodaFacade implements TehnickekarakteristikeproizvodaFacadeRemote{
	// property constants
	public static final String KARAKTERISTIKA = "karakteristika";
	public static final String VREDNOST_KARAKTERISTIKE = "vrednostKarakteristike";
	public static final String VERZIJA = "verzija";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved
	 * Tehnickekarakteristikeproizvoda entity. All subsequent persist actions of
	 * this entity should use the #update() method.
	 * 
	 * @param entity
	 *            Tehnickekarakteristikeproizvoda entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Tehnickekarakteristikeproizvoda entity) {
		LogUtil.log("saving Tehnickekarakteristikeproizvoda instance",
				Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Tehnickekarakteristikeproizvoda entity.
	 * 
	 * @param entity
	 *            Tehnickekarakteristikeproizvoda entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Tehnickekarakteristikeproizvoda entity) {
		LogUtil.log("deleting Tehnickekarakteristikeproizvoda instance",
				Level.INFO, null);
		try {
			entity = entityManager.getReference(
					Tehnickekarakteristikeproizvoda.class, entity.getIdTk());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Tehnickekarakteristikeproizvoda entity and
	 * return it or a copy of it to the sender. A copy of the
	 * Tehnickekarakteristikeproizvoda entity parameter is returned when the JPA
	 * persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Tehnickekarakteristikeproizvoda entity to update
	 * @return Tehnickekarakteristikeproizvoda the persisted
	 *         Tehnickekarakteristikeproizvoda entity instance, may not be the
	 *         same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Tehnickekarakteristikeproizvoda update(
			Tehnickekarakteristikeproizvoda entity) {
		LogUtil.log("updating Tehnickekarakteristikeproizvoda instance",
				Level.INFO, null);
		try {
			Tehnickekarakteristikeproizvoda result = entityManager
					.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Tehnickekarakteristikeproizvoda findById(Integer id) {
		LogUtil.log(
				"finding Tehnickekarakteristikeproizvoda instance with id: "
						+ id, Level.INFO, null);
		try {
			Tehnickekarakteristikeproizvoda instance = entityManager.find(
					Tehnickekarakteristikeproizvoda.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Tehnickekarakteristikeproizvoda entities with a specific
	 * property value.
	 * 
	 * @param propertyName
	 *            the name of the Tehnickekarakteristikeproizvoda property to
	 *            query
	 * @param value
	 *            the property value to match
	 * @return List<Tehnickekarakteristikeproizvoda> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Tehnickekarakteristikeproizvoda> findByProperty(
			String propertyName, final Object value) {
		LogUtil.log(
				"finding Tehnickekarakteristikeproizvoda instance with property: "
						+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Tehnickekarakteristikeproizvoda model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Tehnickekarakteristikeproizvoda> findByKarakteristika(
			Object karakteristika) {
		return findByProperty(KARAKTERISTIKA, karakteristika);
	}

	public List<Tehnickekarakteristikeproizvoda> findByVrednostKarakteristike(
			Object vrednostKarakteristike) {
		return findByProperty(VREDNOST_KARAKTERISTIKE, vrednostKarakteristike);
	}

	public List<Tehnickekarakteristikeproizvoda> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Tehnickekarakteristikeproizvoda entities.
	 * 
	 * @return List<Tehnickekarakteristikeproizvoda> all
	 *         Tehnickekarakteristikeproizvoda entities
	 */
	@SuppressWarnings("unchecked")
	public List<Tehnickekarakteristikeproizvoda> findAll() {
		LogUtil.log("finding all Tehnickekarakteristikeproizvoda instances",
				Level.INFO, null);
		try {
			final String queryString = "select model from Tehnickekarakteristikeproizvoda model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}