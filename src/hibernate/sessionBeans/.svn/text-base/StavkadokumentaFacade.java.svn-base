package hibernate.sessionBeans;

import hibernate.entities.Stavkadokumenta;
import hibernate.entities.StavkadokumentaId;
import hibernate.remotes.StavkadokumentaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Stavkadokumenta.
 * 
 * @see fasades.Stavkadokumenta
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class StavkadokumentaFacade implements StavkadokumentaFacadeRemote{
	// property constants
	public static final String IZDATA_KOLICINA = "izdataKolicina";
	public static final String CENA_PROIZVODA = "cenaProizvoda";
	public static final String UKUPAN_IZNOS_STAVKE = "ukupanIznosStavke";
	public static final String UKUPAN_PDV_STAVKE = "ukupanPdvStavke";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Stavkadokumenta entity.
	 * All subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Stavkadokumenta entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Stavkadokumenta entity) {
		LogUtil.log("saving Stavkadokumenta instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Stavkadokumenta entity.
	 * 
	 * @param entity
	 *            Stavkadokumenta entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Stavkadokumenta entity) {
		LogUtil.log("deleting Stavkadokumenta instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Stavkadokumenta.class, entity
					.getId());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Stavkadokumenta entity and return it or a copy
	 * of it to the sender. A copy of the Stavkadokumenta entity parameter is
	 * returned when the JPA persistence mechanism has not previously been
	 * tracking the updated entity.
	 * 
	 * @param entity
	 *            Stavkadokumenta entity to update
	 * @return Stavkadokumenta the persisted Stavkadokumenta entity instance,
	 *         may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Stavkadokumenta update(Stavkadokumenta entity) {
		LogUtil.log("updating Stavkadokumenta instance", Level.INFO, null);
		try {
			Stavkadokumenta result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Stavkadokumenta findById(StavkadokumentaId id) {
		LogUtil.log("finding Stavkadokumenta instance with id: " + id,
				Level.INFO, null);
		try {
			Stavkadokumenta instance = entityManager.find(
					Stavkadokumenta.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Stavkadokumenta entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Stavkadokumenta property to query
	 * @param value
	 *            the property value to match
	 * @return List<Stavkadokumenta> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Stavkadokumenta> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding Stavkadokumenta instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Stavkadokumenta model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Stavkadokumenta> findByIzdataKolicina(Object izdataKolicina) {
		return findByProperty(IZDATA_KOLICINA, izdataKolicina);
	}

	public List<Stavkadokumenta> findByCenaProizvoda(Object cenaProizvoda) {
		return findByProperty(CENA_PROIZVODA, cenaProizvoda);
	}

	public List<Stavkadokumenta> findByUkupanIznosStavke(
			Object ukupanIznosStavke) {
		return findByProperty(UKUPAN_IZNOS_STAVKE, ukupanIznosStavke);
	}

	public List<Stavkadokumenta> findByUkupanPdvStavke(Object ukupanPdvStavke) {
		return findByProperty(UKUPAN_PDV_STAVKE, ukupanPdvStavke);
	}

	/**
	 * Find all Stavkadokumenta entities.
	 * 
	 * @return List<Stavkadokumenta> all Stavkadokumenta entities
	 */
	@SuppressWarnings("unchecked")
	public List<Stavkadokumenta> findAll() {
		LogUtil.log("finding all Stavkadokumenta instances", Level.INFO, null);
		try {
			final String queryString = "select model from Stavkadokumenta model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}