package hibernate.sessionBeans;

import hibernate.entities.Stavkafinansijskogdokumenta;
import hibernate.entities.StavkafinansijskogdokumentaId;
import hibernate.remotes.StavkafinansijskogdokumentaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Stavkafinansijskogdokumenta.
 * 
 * @see fasades.Stavkafinansijskogdokumenta
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class StavkafinansijskogdokumentaFacade implements StavkafinansijskogdokumentaFacadeRemote{
	// property constants
	public static final String SMER_PROMENE = "smerPromene";
	public static final String IZNOS = "iznos";
	public static final String VERZIJA = "verzija";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved
	 * Stavkafinansijskogdokumenta entity. All subsequent persist actions of
	 * this entity should use the #update() method.
	 * 
	 * @param entity
	 *            Stavkafinansijskogdokumenta entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Stavkafinansijskogdokumenta entity) {
		LogUtil.log("saving Stavkafinansijskogdokumenta instance", Level.INFO,
				null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Stavkafinansijskogdokumenta entity.
	 * 
	 * @param entity
	 *            Stavkafinansijskogdokumenta entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Stavkafinansijskogdokumenta entity) {
		LogUtil.log("deleting Stavkafinansijskogdokumenta instance",
				Level.INFO, null);
		try {
			entity = entityManager.getReference(
					Stavkafinansijskogdokumenta.class, entity.getId());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Stavkafinansijskogdokumenta entity and return
	 * it or a copy of it to the sender. A copy of the
	 * Stavkafinansijskogdokumenta entity parameter is returned when the JPA
	 * persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Stavkafinansijskogdokumenta entity to update
	 * @return Stavkafinansijskogdokumenta the persisted
	 *         Stavkafinansijskogdokumenta entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Stavkafinansijskogdokumenta update(Stavkafinansijskogdokumenta entity) {
		LogUtil.log("updating Stavkafinansijskogdokumenta instance",
				Level.INFO, null);
		try {
			Stavkafinansijskogdokumenta result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Stavkafinansijskogdokumenta findById(StavkafinansijskogdokumentaId id) {
		LogUtil.log("finding Stavkafinansijskogdokumenta instance with id: "
				+ id, Level.INFO, null);
		try {
			Stavkafinansijskogdokumenta instance = entityManager.find(
					Stavkafinansijskogdokumenta.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Stavkafinansijskogdokumenta entities with a specific property
	 * value.
	 * 
	 * @param propertyName
	 *            the name of the Stavkafinansijskogdokumenta property to query
	 * @param value
	 *            the property value to match
	 * @return List<Stavkafinansijskogdokumenta> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Stavkafinansijskogdokumenta> findByProperty(
			String propertyName, final Object value) {
		LogUtil.log(
				"finding Stavkafinansijskogdokumenta instance with property: "
						+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Stavkafinansijskogdokumenta model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Stavkafinansijskogdokumenta> findBySmerPromene(
			Object smerPromene) {
		return findByProperty(SMER_PROMENE, smerPromene);
	}

	public List<Stavkafinansijskogdokumenta> findByIznos(Object iznos) {
		return findByProperty(IZNOS, iznos);
	}

	public List<Stavkafinansijskogdokumenta> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Stavkafinansijskogdokumenta entities.
	 * 
	 * @return List<Stavkafinansijskogdokumenta> all Stavkafinansijskogdokumenta
	 *         entities
	 */
	@SuppressWarnings("unchecked")
	public List<Stavkafinansijskogdokumenta> findAll() {
		LogUtil.log("finding all Stavkafinansijskogdokumenta instances",
				Level.INFO, null);
		try {
			final String queryString = "select model from Stavkafinansijskogdokumenta model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}