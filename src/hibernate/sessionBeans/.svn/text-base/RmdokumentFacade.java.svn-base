package hibernate.sessionBeans;

import hibernate.entities.Rmdokument;
import hibernate.remotes.RmdokumentFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Rmdokument.
 * 
 * @see fasades.Rmdokument
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class RmdokumentFacade implements RmdokumentFacadeRemote{
	// property constants
	public static final String UKUPAN_IZNOS_OTPREMNICE = "ukupanIznosOtpremnice";
	public static final String UKUPAN_PDV_OTPREMNICE = "ukupanPdvOtpremnice";
	public static final String UKUPAN_RABAT_OPTREMNICE = "ukupanRabatOptremnice";
	public static final String PROKNJIZEN_DOKUMENT = "proknjizenDokument";
	public static final String STORNIRANI_DOKUMENT = "storniraniDokument";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Rmdokument entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Rmdokument entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Rmdokument entity) {
		LogUtil.log("saving Rmdokument instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Rmdokument entity.
	 * 
	 * @param entity
	 *            Rmdokument entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Rmdokument entity) {
		LogUtil.log("deleting Rmdokument instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Rmdokument.class, entity
					.getIdRmdokumenta());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Rmdokument entity and return it or a copy of
	 * it to the sender. A copy of the Rmdokument entity parameter is returned
	 * when the JPA persistence mechanism has not previously been tracking the
	 * updated entity.
	 * 
	 * @param entity
	 *            Rmdokument entity to update
	 * @return Rmdokument the persisted Rmdokument entity instance, may not be
	 *         the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Rmdokument update(Rmdokument entity) {
		LogUtil.log("updating Rmdokument instance", Level.INFO, null);
		try {
			Rmdokument result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Rmdokument findById(Integer id) {
		LogUtil.log("finding Rmdokument instance with id: " + id, Level.INFO,
				null);
		try {
			Rmdokument instance = entityManager.find(Rmdokument.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Rmdokument entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Rmdokument property to query
	 * @param value
	 *            the property value to match
	 * @return List<Rmdokument> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Rmdokument> findByProperty(String propertyName,
			final Object value) {
		LogUtil.log("finding Rmdokument instance with property: "
				+ propertyName + ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Rmdokument model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Rmdokument> findByUkupanIznosOtpremnice(
			Object ukupanIznosOtpremnice) {
		return findByProperty(UKUPAN_IZNOS_OTPREMNICE, ukupanIznosOtpremnice);
	}

	public List<Rmdokument> findByUkupanPdvOtpremnice(Object ukupanPdvOtpremnice) {
		return findByProperty(UKUPAN_PDV_OTPREMNICE, ukupanPdvOtpremnice);
	}

	public List<Rmdokument> findByUkupanRabatOptremnice(
			Object ukupanRabatOptremnice) {
		return findByProperty(UKUPAN_RABAT_OPTREMNICE, ukupanRabatOptremnice);
	}

	public List<Rmdokument> findByProknjizenDokument(Object proknjizenDokument) {
		return findByProperty(PROKNJIZEN_DOKUMENT, proknjizenDokument);
	}

	public List<Rmdokument> findByStorniraniDokument(Object storniraniDokument) {
		return findByProperty(STORNIRANI_DOKUMENT, storniraniDokument);
	}

	/**
	 * Find all Rmdokument entities.
	 * 
	 * @return List<Rmdokument> all Rmdokument entities
	 */
	@SuppressWarnings("unchecked")
	public List<Rmdokument> findAll() {
		LogUtil.log("finding all Rmdokument instances", Level.INFO, null);
		try {
			final String queryString = "select model from Rmdokument model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}