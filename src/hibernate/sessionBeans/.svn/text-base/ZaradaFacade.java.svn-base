package hibernate.sessionBeans;

import hibernate.entities.Zarada;
import hibernate.remotes.ZaliheFacadeRemote;
import hibernate.remotes.ZaradaFacadeRemote;

import java.util.List;
import java.util.logging.Level;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Zarada.
 * 
 * @see fasades.Zarada
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class ZaradaFacade implements ZaradaFacadeRemote{
	// property constants
	public static final String MESECNI_ZARADJENI_SATI = "mesecniZaradjeniSati";
	public static final String MESECNI_PROCENTUALNA_OSNOVICA = "mesecniProcentualnaOsnovica";
	public static final String MESECNA_ZARADA_PO_SATU = "mesecnaZaradaPoSatu";
	public static final String MESECNI_PROCENAT_ZARADE = "mesecniProcenatZarade";
	public static final String PROKNJIZENA_ZARADA = "proknjizenaZarada";
	public static final String VERZIJA = "verzija";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved Zarada entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Zarada entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Zarada entity) {
		LogUtil.log("saving Zarada instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Zarada entity.
	 * 
	 * @param entity
	 *            Zarada entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Zarada entity) {
		LogUtil.log("deleting Zarada instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Zarada.class, entity
					.getOznakaZarade());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved Zarada entity and return it or a copy of it to
	 * the sender. A copy of the Zarada entity parameter is returned when the
	 * JPA persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Zarada entity to update
	 * @return Zarada the persisted Zarada entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Zarada update(Zarada entity) {
		LogUtil.log("updating Zarada instance", Level.INFO, null);
		try {
			Zarada result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Zarada findById(Integer id) {
		LogUtil.log("finding Zarada instance with id: " + id, Level.INFO, null);
		try {
			Zarada instance = entityManager.find(Zarada.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Zarada entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Zarada property to query
	 * @param value
	 *            the property value to match
	 * @return List<Zarada> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Zarada> findByProperty(String propertyName, final Object value) {
		LogUtil.log("finding Zarada instance with property: " + propertyName
				+ ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Zarada model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<Zarada> findByMesecniZaradjeniSati(Object mesecniZaradjeniSati) {
		return findByProperty(MESECNI_ZARADJENI_SATI, mesecniZaradjeniSati);
	}

	public List<Zarada> findByMesecniProcentualnaOsnovica(
			Object mesecniProcentualnaOsnovica) {
		return findByProperty(MESECNI_PROCENTUALNA_OSNOVICA,
				mesecniProcentualnaOsnovica);
	}

	public List<Zarada> findByMesecnaZaradaPoSatu(Object mesecnaZaradaPoSatu) {
		return findByProperty(MESECNA_ZARADA_PO_SATU, mesecnaZaradaPoSatu);
	}

	public List<Zarada> findByMesecniProcenatZarade(Object mesecniProcenatZarade) {
		return findByProperty(MESECNI_PROCENAT_ZARADE, mesecniProcenatZarade);
	}

	public List<Zarada> findByProknjizenaZarada(Object proknjizenaZarada) {
		return findByProperty(PROKNJIZENA_ZARADA, proknjizenaZarada);
	}

	public List<Zarada> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}

	/**
	 * Find all Zarada entities.
	 * 
	 * @return List<Zarada> all Zarada entities
	 */
	@SuppressWarnings("unchecked")
	public List<Zarada> findAll() {
		LogUtil.log("finding all Zarada instances", Level.INFO, null);
		try {
			final String queryString = "select model from Zarada model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}