package hibernate.sessionBeans;

import hibernate.entities.Radnik;
import hibernate.locales.RadnikFacadeLocal;
import hibernate.remotes.RadnikFacadeRemote;

import java.util.List;
import java.util.Properties;
import java.util.logging.Level;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.naming.InitialContext;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity Radnik.
 * 
 * @see fasades.Radnik
 * @author MyEclipse Persistence Tools
 */
@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class RadnikFacade implements RadnikFacadeRemote, RadnikFacadeLocal{
	// property constants
	public static final String IME_RADNIKA = "imeRadnika";
	public static final String PREZIME_RADNIKA = "prezimeRadnika";
	public static final String OBRACUN_ZARADE = "obracunZarade";
	public static final String RADNO_MESTO = "radnoMesto";
	public static final String USERNAME_RADNIKA = "usernameRadnika";
	public static final String PASSWORD_RADNIKA = "passwordRadnika";
	public static final String PROCENAT_ZARADE = "procenatZarade";
	public static final String SATNICA = "satnica";
	public static final String JMBG_RADNIKA = "jmbgRadnika";
	public static final String VERZIJA = "verzija";

	@Resource 
	private SessionContext ctx;

	@PersistenceContext
	private EntityManager entityManager;
	
	private InitialContext context;
	
	public Properties getProperties(){
		Properties properties = new Properties();
		properties.put("java.naming.factory.initial",
				"org.jnp.interfaces.NamingContextFactory");
		properties.put("java.naming.factory.url.pkgs",
				"=org.jboss.naming:org.jnp.interfaces");
		properties.put("java.naming.provider.url", "localhost:1099");
		return properties;
	}

	/**
	 * Perform an initial save of a previously unsaved Radnik entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Radnik entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void save(Radnik entity){
		/*try {
			context = new InitialContext(getProperties());
			String remoteName = "SessionBean";
			SessionBeanLocale sessionLocale = (SessionBeanLocale) context.lookup(remoteName);
			if(!sessionLocale.isLogin()){
				return;
			}
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		}*/
		
		LogUtil.log("saving Radnik instance", Level.INFO, null);
		try {
			entity = entityManager.merge(entity);
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent Radnik entity.
	 * 
	 * @param entity
	 *            Radnik entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public void delete(Radnik entity) {
//		try {
//			context = new InitialContext(getProperties());
//			String remoteName = "SessionBean/locale";
//			SessionBeanLocale sessionLocale = (SessionBeanLocale) context.lookup(remoteName);
//			if(!sessionLocale.isLogin()){
//				return;
//			}
//		} catch (NamingException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//			return;
//		}
		LogUtil.log("deleting Radnik instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(Radnik.class, entity
					.getOznakaRadnika());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}
	
	/**
	 * Persist a previously saved Radnik entity and return it or a copy of it to
	 * the sender. A copy of the Radnik entity parameter is returned when the
	 * JPA persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Radnik entity to update
	 * @return Radnik the persisted Radnik entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
	public Radnik update(Radnik entity) {
//		try {
//			context = new InitialContext(getProperties());
//			String remoteName = "SessionBean/locale";
//			SessionBeanLocale sessionLocale = (SessionBeanLocale) context.lookup(remoteName);
//			if(!sessionLocale.isLogin()){
//				return null;
//			}
//		} catch (NamingException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//			return null;
//		}
		LogUtil.log("updating Radnik instance", Level.INFO, null);
		try {
			Radnik result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			ctx.setRollbackOnly();
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public Radnik findById(Integer id) {
		LogUtil.log("finding Radnik instance with id: " + id, Level.INFO, null);
		try {
			Radnik instance = entityManager.find(Radnik.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}
	
	public Radnik findFullById(Integer id) {
		LogUtil.log("finding Radnik instance with id: " + id, Level.INFO, null);
		try {
			final String queryString = "select r from Radnik r join fetch r.analitickikonto a where r.oznakaRadnika = :id";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("id", id);
			return (Radnik) query.getSingleResult();
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all Radnik entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Radnik property to query
	 * @param value
	 *            the property value to match
	 * @return List<Radnik> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<Radnik> findByProperty(String propertyName, final Object value) {
		LogUtil.log("finding Radnik instance with property: " + propertyName
				+ ", value: " + value, Level.INFO, null);
		try {
			final String queryString = "select model from Radnik model where model."
					+ propertyName + "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	@Override
	public List<Radnik> findByContainProperties(String[] propertyNames,
			Object[] values) {
		LogUtil.log("finding Zaposleni instance with properties: " + propertyNames
				+ ", values: " + values, Level.INFO, null);
		try {
			String queryString = "select model from Zaposleni model where ";
			for(int i = 0; i<propertyNames.length; i++){		
				queryString+="model."+ propertyNames[i];
				if(propertyNames[i].equals(RADNO_MESTO) || propertyNames[i].equals(OBRACUN_ZARADE)){
					 queryString+=" = ";
				}else{
					queryString+=" like ";
				}
				queryString+=propertyNames[i];
				if(i<propertyNames.length-1){
					queryString+="AND ";
				}
			}
			Query query = entityManager.createQuery(queryString);
			for(int i = 0; i<propertyNames.length; i++){		
				query.setParameter(propertyNames[i],(propertyNames[i].equals(RADNO_MESTO)? values[i]:values[i]+"%"));
			}
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}
	
	public List<Radnik> findByProperties(String[] propertyNames, final Object[] values) {
		LogUtil.log("finding Radnik instance with properties: " + propertyNames
				+ ", values: " + values, Level.INFO, null);
		try {
			String queryString = "select model from Radnik model where ";
			for(int i = 0; i<propertyNames.length; i++){		
				queryString+="model."+ propertyNames[i] + " = :"+propertyNames[i]+" ";
				if(i<propertyNames.length-1){
					queryString+="AND ";
				}
			}
			System.out.println(queryString);
			Query query = entityManager.createQuery(queryString);
			for(int i = 0; i<propertyNames.length; i++){		
				query.setParameter(propertyNames[i], values[i]);
			}
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}
	
	public List<Radnik> findByImeRadnika(Object imeRadnika) {
		return findByProperty(IME_RADNIKA, imeRadnika);
	}

	public List<Radnik> findByPrezimeRadnika(Object prezimeRadnika) {
		return findByProperty(PREZIME_RADNIKA, prezimeRadnika);
	}

	public List<Radnik> findByUsernameRadnika(Object usernameRadnika) {
		return findByProperty(USERNAME_RADNIKA, usernameRadnika);
	}

	public List<Radnik> findByPasswordRadnika(Object passwordRadnika) {
		return findByProperty(PASSWORD_RADNIKA, passwordRadnika);
	}

	public List<Radnik> findByJmbgRadnika(Object jmbgRadnika) {
		return findByProperty(JMBG_RADNIKA, jmbgRadnika);
	}

	public List<Radnik> findByVerzija(Object verzija) {
		return findByProperty(VERZIJA, verzija);
	}
	
	public List<Radnik> findByRadnoMesto(Object radnoMesto) {
		return findByProperty(RADNO_MESTO, radnoMesto);
	}
	
	public List<Radnik> findByObracunZarade(Object obracun) {
		return findByProperty(OBRACUN_ZARADE, obracun);
	}

	/**
	 * Find all Radnik entities.
	 * 
	 * @return List<Radnik> all Radnik entities
	 */
	@SuppressWarnings("unchecked")
	public List<Radnik> findAll() {
		LogUtil.log("finding all Radnik instances", Level.INFO, null);
		try {
			final String queryString = "select model from Radnik model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

	@Override
	public Radnik findByUsernamePass(String username, String pass) {
		List<Radnik> res = findByProperties(new String[]{USERNAME_RADNIKA, PASSWORD_RADNIKA}, new Object[]{username, pass});
		return res.size()==0? null:res.get(0);
	}
}