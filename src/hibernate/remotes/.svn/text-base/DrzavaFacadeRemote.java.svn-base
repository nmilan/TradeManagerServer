package hibernate.remotes;

import hibernate.entities.Drzava;

import java.util.List;

import javax.ejb.Remote;

/**
 * Remote interface for DrzavaFacade.
 * 
 * @author MyEclipse Persistence Tools
 */
@Remote
public interface DrzavaFacadeRemote {
	/**
	 * Perform an initial save of a previously unsaved Drzava entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Drzava entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Drzava entity);

	/**
	 * Delete a persistent Drzava entity.
	 * 
	 * @param entity
	 *            Drzava entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Drzava entity);

	/**
	 * Persist a previously saved Drzava entity and return it or a copy of it to
	 * the sender. A copy of the Drzava entity parameter is returned when the
	 * JPA persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Drzava entity to update
	 * @return Drzava the persisted Drzava entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Drzava update(Drzava entity);

	public Drzava findById(String id);

	/**
	 * Find all Drzava entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Drzava property to query
	 * @param value
	 *            the property value to match
	 * @return List<Drzava> found by query
	 */
	public List<Drzava> findByProperty(String propertyName, Object value);

	public List<Drzava> findByDrzNaziv(Object drzNaziv);

	public List<Drzava> findByDrzSlozena(Object drzSlozena);

	public List<Drzava> findByVerzija3(Object verzija3);

	/**
	 * Find all Drzava entities.
	 * 
	 * @return List<Drzava> all Drzava entities
	 */
	public List<Drzava> findAll();
}