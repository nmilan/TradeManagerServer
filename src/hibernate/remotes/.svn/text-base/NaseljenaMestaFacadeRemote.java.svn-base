package hibernate.remotes;

import hibernate.entities.NaseljenaMesta;

import java.util.List;

import javax.ejb.Remote;

/**
 * Remote interface for NaseljenaMestaFacade.
 * 
 * @author MyEclipse Persistence Tools
 */
@Remote
public interface NaseljenaMestaFacadeRemote {
	/**
	 * Perform an initial save of a previously unsaved NaseljenaMesta entity.
	 * All subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            NaseljenaMesta entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(NaseljenaMesta entity);

	/**
	 * Delete a persistent NaseljenaMesta entity.
	 * 
	 * @param entity
	 *            NaseljenaMesta entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(NaseljenaMesta entity);

	/**
	 * Persist a previously saved NaseljenaMesta entity and return it or a copy
	 * of it to the sender. A copy of the NaseljenaMesta entity parameter is
	 * returned when the JPA persistence mechanism has not previously been
	 * tracking the updated entity.
	 * 
	 * @param entity
	 *            NaseljenaMesta entity to update
	 * @return NaseljenaMesta the persisted NaseljenaMesta entity instance, may
	 *         not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public NaseljenaMesta update(NaseljenaMesta entity);

	public NaseljenaMesta findById(Integer id);

	/**
	 * Find all NaseljenaMesta entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the NaseljenaMesta property to query
	 * @param value
	 *            the property value to match
	 * @return List<NaseljenaMesta> found by query
	 */
	public List<NaseljenaMesta> findByProperty(String propertyName, Object value);

	public List<NaseljenaMesta> findByNmNaziv(Object nmNaziv);

	public List<NaseljenaMesta> findByNmPttoznaka(Object nmPttoznaka);

	public List<NaseljenaMesta> findByNmInostrano(Object nmInostrano);

	public List<NaseljenaMesta> findByNmBrojSt(Object nmBrojSt);

	public List<NaseljenaMesta> findByVerzija2(Object verzija2);

	/**
	 * Find all NaseljenaMesta entities.
	 * 
	 * @return List<NaseljenaMesta> all NaseljenaMesta entities
	 */
	public List<NaseljenaMesta> findAll();
}