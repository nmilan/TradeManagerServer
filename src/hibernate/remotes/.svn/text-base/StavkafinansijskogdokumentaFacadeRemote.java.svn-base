package hibernate.remotes;

import hibernate.entities.Stavkafinansijskogdokumenta;
import hibernate.entities.StavkafinansijskogdokumentaId;

import java.util.List;

import javax.ejb.Remote;

/**
 * Remote interface for StavkafinansijskogdokumentaFacade.
 * 
 * @author MyEclipse Persistence Tools
 */
@Remote
public interface StavkafinansijskogdokumentaFacadeRemote {
	/**
	 * Perform an initial save of a previously unsaved
	 * Stavkafinansijskogdokumenta entity. All subsequent persist actions of
	 * this entity should use the #update() method.
	 * 
	 * @param entity
	 *            Stavkafinansijskogdokumenta entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Stavkafinansijskogdokumenta entity);

	/**
	 * Delete a persistent Stavkafinansijskogdokumenta entity.
	 * 
	 * @param entity
	 *            Stavkafinansijskogdokumenta entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Stavkafinansijskogdokumenta entity);

	/**
	 * Persist a previously saved Stavkafinansijskogdokumenta entity and return
	 * it or a copy of it to the sender. A copy of the
	 * Stavkafinansijskogdokumenta entity parameter is returned when the JPA
	 * persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Stavkafinansijskogdokumenta entity to update
	 * @return Stavkafinansijskogdokumenta the persisted
	 *         Stavkafinansijskogdokumenta entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Stavkafinansijskogdokumenta update(Stavkafinansijskogdokumenta entity);

	public Stavkafinansijskogdokumenta findById(StavkafinansijskogdokumentaId id);

	/**
	 * Find all Stavkafinansijskogdokumenta entities with a specific property
	 * value.
	 * 
	 * @param propertyName
	 *            the name of the Stavkafinansijskogdokumenta property to query
	 * @param value
	 *            the property value to match
	 * @return List<Stavkafinansijskogdokumenta> found by query
	 */
	public List<Stavkafinansijskogdokumenta> findByProperty(
			String propertyName, Object value);

	public List<Stavkafinansijskogdokumenta> findBySmerPromene(
			Object smerPromene);

	public List<Stavkafinansijskogdokumenta> findByIznos(Object iznos);

	public List<Stavkafinansijskogdokumenta> findByVerzija(Object verzija);

	/**
	 * Find all Stavkafinansijskogdokumenta entities.
	 * 
	 * @return List<Stavkafinansijskogdokumenta> all Stavkafinansijskogdokumenta
	 *         entities
	 */
	public List<Stavkafinansijskogdokumenta> findAll();
}