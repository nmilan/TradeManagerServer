package hibernate.remotes;

import hibernate.entities.Rabat;

import java.util.List;

import javax.ejb.Remote;

/**
 * Remote interface for RabatFacade.
 * 
 * @author MyEclipse Persistence Tools
 */
@Remote
public interface RabatFacadeRemote {
	/**
	 * Perform an initial save of a previously unsaved Rabat entity. All
	 * subsequent persist actions of this entity should use the #update()
	 * method.
	 * 
	 * @param entity
	 *            Rabat entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(Rabat entity);

	/**
	 * Delete a persistent Rabat entity.
	 * 
	 * @param entity
	 *            Rabat entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(Rabat entity);

	/**
	 * Persist a previously saved Rabat entity and return it or a copy of it to
	 * the sender. A copy of the Rabat entity parameter is returned when the JPA
	 * persistence mechanism has not previously been tracking the updated
	 * entity.
	 * 
	 * @param entity
	 *            Rabat entity to update
	 * @return Rabat the persisted Rabat entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public Rabat update(Rabat entity);

	public Rabat findById(Integer id);

	/**
	 * Find all Rabat entities with a specific property value.
	 * 
	 * @param propertyName
	 *            the name of the Rabat property to query
	 * @param value
	 *            the property value to match
	 * @return List<Rabat> found by query
	 */
	public List<Rabat> findByProperty(String propertyName, Object value);

	public List<Rabat> findByKupovniRabat(Object kupovniRabat);

	public List<Rabat> findByProcenatRabata(Object procenatRabata);

	public List<Rabat> findByVerzija(Object verzija);

	/**
	 * Find all Rabat entities.
	 * 
	 * @return List<Rabat> all Rabat entities
	 */
	public List<Rabat> findAll();
}